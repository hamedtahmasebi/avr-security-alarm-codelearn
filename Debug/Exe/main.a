;#include <mega16a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#define IS_ON_LED_OUT PORTC .0
;#define ALARM_OUT PORTC .1
;#define IS_SENSOR_PAUSED_LED PORTB.0
;
;int PAUSE_TIME_AFTER_DISCARD_SECONDS = 5;
;
;typedef enum {
;  rmt_no_action, // Do nothing, prevents default behaviour of enums.
;  rmt_turn_on,
;  rmt_turn_off,
;  rmt_discard_alarm,
;} eRemoteAction;
;
;
;
;bit alarm_triggered = 0; // If alarm is triggered, this will be 1 until alarm is discarded
;bit is_silent_mode = 0; // A few seconds after alarm discard, the sensor input will be ignored.
;
;void temporarily_pause_sesonr() {
; 0000 0014 void temporarily_pause_sesonr() {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0015     // with prescale set to 1024 and clk frequency = 1MHz, timer counts almost 1ms each clock.
; 0000 0016     int timer_bottom = (65 - PAUSE_TIME_AFTER_DISCARD_SECONDS) * 1000;
; 0000 0017     is_silent_mode = 1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	timer_bottom -> R16,R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0018     TCNT1 = timer_bottom;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0019     TCCR1B |= 0x05; // prescale set to 5 -> 1MHz / 1024 ~= 1ms
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 001A }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;void handle_remote_action(eRemoteAction rmt_action) {
; 0000 001C void handle_remote_action(eRemoteAction rmt_action) {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 001D   if (rmt_action == rmt_no_action)
;PCODE: $00000023 VOL: 0
;	rmt_action -> Y+0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 001E     return;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 001F 
; 0000 0020   if (rmt_action == rmt_turn_on) {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0021     IS_ON_LED_OUT = 1;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0022   }
; 0000 0023   if (rmt_action == rmt_turn_off) {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0024     IS_ON_LED_OUT = 0;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0025     ALARM_OUT = 0;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0026   }
; 0000 0027   if (rmt_action == rmt_discard_alarm) {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0028     alarm_triggered = 0;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0029     temporarily_pause_sesonr();
;PCODE: $0000003E VOL: 0
; 0000 002A   }
; 0000 002B }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;
;
;
;void main() {
; 0000 002F void main() {
;PCODE: $00000043 VOL: 0
; 0000 0030 #asm("sei") // Enable interrupt
;PCODE: $00000044 VOL: 0
	sei
;PCODE: $00000045 VOL: 0
; 0000 0031   GICR = 0b11000000;  // Enabling interrupt 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0032   DDRC = 0xff;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0033   PORTC = 0;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0034   DDRB = 0x1000000;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0035   PORTB |= 0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0036   IS_ON_LED_OUT = 1;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0037   ALARM_OUT = 0;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0038   TIMSK |=(1<<TOIE1); // Enable Timer1 Overflow
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0039   while (1) {
;PCODE: $00000058 VOL: 0
; 0000 003A     eRemoteAction rmt_action = rmt_no_action;
; 0000 003B     if (PINA .0 == 1) {
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;	rmt_action -> Y+0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 003C       rmt_action = rmt_turn_on;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 003D     }
; 0000 003E 
; 0000 003F     if (PINA .1 == 1) {
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0040       rmt_action = rmt_turn_off;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0041     }
; 0000 0042 
; 0000 0043     if (PINA .2 == 1) {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0044       rmt_action = rmt_discard_alarm;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0045     }
; 0000 0046 
; 0000 0047     if (PINA .3 == 1) {
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0048       rmt_action = rmt_turn_on;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0049     }
; 0000 004A     handle_remote_action(rmt_action);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 004B     ALARM_OUT = (alarm_triggered && !is_silent_mode) ? 1 : 0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 004C     IS_SENSOR_PAUSED_LED = is_silent_mode ? 1 : 0;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 004D   }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 004E }
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;
;interrupt[2] void trigger_alarm() {
; 0000 0050 interrupt[2] void trigger_alarm() {
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0051   if (IS_ON_LED_OUT == 1) {
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0052     alarm_triggered = 1;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0053   }
; 0000 0054 }
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;
;interrupt [TIM1_OVF] void exit_silent_mode () {
; 0000 0056 interrupt [9] void exit_silent_mode () {
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0057     is_silent_mode = 0;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0058     TCCR1B=0x00; // turn off the timer
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0059 }
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
